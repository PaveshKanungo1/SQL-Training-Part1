* ADVANCED SQL QUERIES -

1. JOINS: INNER, OUTER (LEFT, RIGHT, FULL), CROSS JOINS:
Inner Join: 
An inner join returns rows when there is a match in both tables.
QUERY:
SELECT a.id, a.name, b.salary
FROM employees a
INNER JOIN salaries b ON a.id = b.employee_id;

_____________

Left Outer Join (Left Join): Returns all rows from the left table, and the matched rows from the right table. 
If there is no match, NULL values are returned for columns from the right table.
QUERY:
SELECT a.id, a.name, b.salary
FROM employees a
LEFT JOIN salaries b ON a.id = b.employee_id;

_____________

Right Outer Join (Right Join): Returns all rows from the right table, and the matched rows from the left table. 
If there is no match, NULL values are returned for columns from the left table.
QUERY:
SELECT a.id, a.name, b.salary
FROM employees a
RIGHT JOIN salaries b ON a.id = b.employee_id;

_____________

Full Outer Join (Full Join): Returns all rows when there is a match in one of the tables. 
If there is no match, NULL values are returned for columns from the non-matching table.
QUERY:
SELECT a.id, a.name, b.salary
FROM employees a
FULL OUTER JOIN salaries b ON a.id = b.employee_id;

_____________

Cross Join: A cross join returns the Cartesian product of the two tables. 
Every row from the first table is joined with every row from the second table.
QUERY:
SELECT a.name, b.salary
FROM employees a
CROSS JOIN salaries b;

_____________________________________________________________________________________________________________________________

2. SUBQUERIES AND CORRELATED SUBQUERIES:
Subquery: A subquery is a query within another query, usually within the WHERE clause.
QUERY:
SELECT name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);

_____________

Correlated Subquery: A correlated subquery references columns from the outer query.
QUERY:
SELECT name, salary
FROM employees e1
WHERE salary > (SELECT AVG(salary) FROM employees e2 WHERE e1.department = e2.department);

_____________________________________________________________________________________________________________________________

3. SET OPERATIONS: UNION, INTERSECT, EXCEPT:
UNION: Combines the results of two or more SELECT statements, removing duplicates.
QUERY:
SELECT id, name FROM employees
UNION
SELECT id, name FROM contractors;

_____________

INTERSECT: Returns only the rows that are common between two SELECT statements.
QUERY:
SELECT id, name FROM employees
INTERSECT
SELECT id, name FROM contractors;

_____________

EXCEPT: Returns rows from the first SELECT statement that do not exist in the second SELECT statement.
QUERY:
SELECT id, name FROM employees
EXCEPT
SELECT id, name FROM contractors;

_____________________________________________________________________________________________________________________________

4. WINDOW FUNCTIONS: ROW_NUMBER(), RANK(), DENSE_RANK(), NTILE(), LAG(), LEAD()
ROW_NUMBER():
Assigns a unique number to each row, starting from 1.
QUERY:
SELECT name, salary, ROW_NUMBER() OVER (ORDER BY salary DESC) AS row_num FROM employees;

_____________

RANK(): Assigns a rank to each row, with gaps for ties.
QUERY:
SELECT name, salary, RANK() OVER (ORDER BY salary DESC) AS rank
FROM employees;

____________

DENSE_RANK(): Assigns a rank to each row, without gaps for ties.
QUERY:
SELECT name, salary, DENSE_RANK() OVER (ORDER BY salary DESC) AS dense_rank
FROM employees;

____________

NTILE(): Distributes the rows into a specified number of groups (quartiles, deciles, etc.).
QUERY:
SELECT name, salary, NTILE(4) OVER (ORDER BY salary DESC) AS quartile
FROM employees;

NTILE(2): Divides the rows into 2 groups (tiles).
The total number of rows (6) is divided into 2 groups (tiles), resulting in 3 rows per group.
The first 3 rows are assigned to salary_group = 1, and the remaining 3 rows are assigned to salary_group = 2.
Key Points:
    Uneven Groups:
        If the total number of rows isn't evenly divisible by the number of tiles, 
        NTILE() will distribute the extra rows one at a time, starting with the first tile.
        For example, dividing 5 rows into 2 tiles would result in the first tile getting 3 rows and the second tile getting 2 rows.
    Use Cases:
        1. Dividing data into quartiles, deciles, or percentiles for statistical analysis. 
        2. Grouping rows for balanced distribution across a specific range.

____________

LAG(): Returns the value of the previous row for a given column.
SYNTAX:
LAG(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY order_column)

column_name: The column whose previous value you want to access.
offset: The number of rows to look back (default is 1 if not specified).
default_value: The value to return if there is no previous row (default is NULL if not specified).

QUERY:
SELECT name, salary, LAG(salary) OVER (ORDER BY salary) AS prev_salary
FROM employees;

Example: Calculating Sales Growth
To calculate the difference between the current month's sales and the previous month's sales.

____________

LEAD(): Returns the value of the next row for a given column.
SYNTAX:
LEAD(column_name, offset, default_value) OVER (PARTITION BY partition_column ORDER BY order_column)
QUERY;
SELECT name, salary, LEAD(salary) OVER (ORDER BY salary) AS next_salary
FROM employees;

_____________________________________________________________________________________________________________________________

5. COMMON TABLE EXPRESSIONS (CTEs) AND RECURSIVE QUERIES:
CTE: A CTE provides a temporary result set that you can reference within a SELECT, INSERT, UPDATE, or DELETE statement.
    Key Characteristics of CTEs:
        1. Temporary Scope: A CTE exists only for the duration of the query in which it is defined.
        2. Readable: Improves query readability and maintainability by structuring queries logically.
        3. Reusable: Allows reusing the temporary result multiple times within the same query.
        4. Recursive Capability: Supports recursive queries to solve hierarchical or iterative problems.

QUERY:
WITH EmployeeCTE AS (
    SELECT id, name, salary
    FROM employees
    WHERE salary > 50000
)
SELECT * FROM EmployeeCTE;

EXAMPLE:
Table: Employees

id	  name	   department	  salary
1	 Alice	     Sales	      50000
2	 Bob	     Sales	      60000
3	 Charlie	  HR	      55000
4	 Dave	      HR	      50000

Query: Find departments with average salaries greater than 50,000
WITH DepartmentAverage AS (
    SELECT 
        department, 
        AVG(salary) AS avg_salary
    FROM employees
    GROUP BY department
)
SELECT 
    department, 
    avg_salary
FROM DepartmentAverage
WHERE avg_salary > 50000;

Result:
department	   avg_salary
  Sales	         55000

_____________

Recursive Query: A recursive CTE is used to handle hierarchical or recursive data, such as organizational structures.
A recursive CTE references itself. It returns the result subset, then it repeatedly(recursively) references itself, and stops
when it returns all the results.

A recursive CTE has three elements:
    1. Non-recursive term: It's a CTE query definition that forms the base result set of the CTE structure.
    2. Recursive term: One or more CTE query definitions joined with non-recursive term using UNION or UNION ALL operator.
    3. Termination check: the recursion stops when no rows are returned from the previous iteration.

SYNTAX:
WITH RECURSIVE cte_name AS (
    CTE_query_definition       --- non-recursive term
    UNION ALL
    recursive_query_definition     --- recursive term
) 
SELECT * FROM cte_name;

EXAMPLE1:
WITH RECURSIVE my_cte AS (
    SELECT 1 AS n    --- base query/anchor query
    UNION ALL 
    SELECT n+1 FROM my_cte             --- recursive query
    WHERE n<3                          --- condition check/termination check
)
SELECT * FROM my_cte;

OUTPUT:
n
1
2
3

EXAMPLE2:
WITH RECURSIVE my_cte AS(
    SELECT 1 AS n 
    UNION ALL
    SELECT n+2 FROM my_cte WHERE n<5
)
SELECT * FROM my_cte;

OUTPUT:
n
1
3
5

EXAMPLE3:
CREATE TABLE Employees(
	emp_id INT PRIMARY KEY,
    emp_name VARCHAR(50),
	manager_id INT    
);

INSERT INTO Employees (emp_id, emp_name, manager_id) 
VALUES 
	(1, 'Madhav', NULL),
    (2, 'Sam', 1),
    (3, 'Tom', 2),
    (4, 'Arjun', 6),
    (5, 'Shiva', 4),
    (6, 'Keshav', 1),
    (7, 'Damodar', 5);

WITH RECURSIVE my_cte AS (  
	SELECT emp_id, emp_name, manager_id FROM Employees WHERE emp_id = 7                 --- Anchor query
    UNION ALL
	SELECT Employees.emp_id, Employees.emp_name, Employees.manager_id                   --- Recursive query      
    FROM Employees INNER JOIN my_cte ON Employees.emp_id = my_cte.manager_id
)
SELECT * FROM my_cte;

OUTPUT:
emp_id  emp_name  manager_id
  7      Damodar    5
  5      Shiva      4
  4      Arjun      6
  6      Keshav     1
  1      Madhav     NULL


Use Cases of RECURSIVE CTE:
1. COUNT UP UNTIL THREE
2. Finding Bosses and hierarchical level for all Employees
3. Finding Routes Between Cities
4. Finding Ancestors

Key Advantages of CTEs
    1. Improves Readability: Breaks complex queries into smaller, understandable pieces.
    2. Self-Referencing (Recursive): Useful for hierarchical or iterative data processing.
    3. Encapsulation: Makes it easier to test and debug specific parts of a query.

_____________________________________________________________________________________________________________________________

PIVOTING AND UNPIVOTING DATA:
Pivoting and unpivoting are techniques used in SQL to transform data between rows and columns. 
These operations are essential when you need to reshape or reorganize data for better analysis or reporting.

1. Pivoting (Rows to Columns):
Pivoting involves transforming data where each row is converted into multiple columns. 
This is useful when you need to show summarized or aggregated values in a more readable format, 
such as turning monthly sales data into individual columns for each month.
EXAMPLE:
department	    month	   salary
Sales	        Jan	        5000
Sales	        Feb	        6000
HR	            Jan	        4000
HR	            Feb	        4500

pivot the data so that each month (Jan, Feb) becomes its own column. 
This way, you can see the total salary for each department in each month.

QUERY (Pivoting):
SELECT 
    department,
    SUM(CASE WHEN month = 'Jan' THEN salary END) AS Jan,
    SUM(CASE WHEN month = 'Feb' THEN salary END) AS Feb
FROM employees
GROUP BY department;

RESULT:
department	  Jan	   Feb
Sales	      5000	   6000
HR	          4000	   4500

2. Unpivoting (Columns to Rows):
Unpivoting is the opposite of pivoting. It transforms columns into rows. 
This is useful when you need to normalize data or convert wide tables into long formats for analysis, 
reporting, or visualization.

EXAMPLE:
department	    Jan	    Feb
Sales	        5000	6000
HR	            4000	4500

Query (Unpivoting):
SELECT 
    department,
    month,
    salary
FROM 
    (SELECT department, Jan, Feb FROM salaries) p
UNPIVOT
    (salary FOR month IN (Jan, Feb)) AS unpvt;

RESULT:
Result:
department	    month	    salary
Sales	        Jan	        5000
Sales	        Feb	        6000
HR	            Jan     	4000
HR          	Feb     	4500

Comparison Between Pivoting and Unpivoting:
Operation	            Pivoting	                        Unpivoting
Definition	       Converts rows into columns	        Converts columns into rows.
Use Case	    Useful for summarizing or               Useful for normalizing or transforming
                aggregating data into a readable        wide tables into long format.
                format (e.g., monthly totals).	 
Example	        Turn monthly salary data                Convert monthly salary columns
                into columns for each month.	        back into rows for each department.

______________________________________________________________________________________________________________________________


















