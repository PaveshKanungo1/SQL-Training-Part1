* ADVANCED SQL QUERIES -

1. JOINS: INNER, OUTER (LEFT, RIGHT, FULL), CROSS JOINS:
Inner Join: 
An inner join returns rows when there is a match in both tables.
QUERY:
SELECT a.id, a.name, b.salary
FROM employees a
INNER JOIN salaries b ON a.id = b.employee_id;

Left Outer Join (Left Join): Returns all rows from the left table, and the matched rows from the right table. 
If there is no match, NULL values are returned for columns from the right table.
QUERY:
SELECT a.id, a.name, b.salary
FROM employees a
LEFT JOIN salaries b ON a.id = b.employee_id;

Right Outer Join (Right Join): Returns all rows from the right table, and the matched rows from the left table. 
If there is no match, NULL values are returned for columns from the left table.
QUERY:
SELECT a.id, a.name, b.salary
FROM employees a
RIGHT JOIN salaries b ON a.id = b.employee_id;

Full Outer Join (Full Join): Returns all rows when there is a match in one of the tables. 
If there is no match, NULL values are returned for columns from the non-matching table.
QUERY:
SELECT a.id, a.name, b.salary
FROM employees a
FULL OUTER JOIN salaries b ON a.id = b.employee_id;

Cross Join: A cross join returns the Cartesian product of the two tables. 
Every row from the first table is joined with every row from the second table.
QUERY:
SELECT a.name, b.salary
FROM employees a
CROSS JOIN salaries b;

_____________________________________________________________________________________________________________________________

2. SUBQUERIES AND CORRELATED SUBQUERIES:
Subquery: A subquery is a query within another query, usually within the WHERE clause.
QUERY:
SELECT name, salary
FROM employees
WHERE salary > (SELECT AVG(salary) FROM employees);

Correlated Subquery: A correlated subquery references columns from the outer query.
QUERY:
SELECT name, salary
FROM employees e1
WHERE salary > (SELECT AVG(salary) FROM employees e2 WHERE e1.department = e2.department);

_____________________________________________________________________________________________________________________________

3. SET OPERATIONS: UNION, INTERSECT, EXCEPT:
UNION: Combines the results of two or more SELECT statements, removing duplicates.
QUERY:
SELECT id, name FROM employees
UNION
SELECT id, name FROM contractors;

INTERSECT: Returns only the rows that are common between two SELECT statements.
QUERY:
SELECT id, name FROM employees
INTERSECT
SELECT id, name FROM contractors;

EXCEPT: Returns rows from the first SELECT statement that do not exist in the second SELECT statement.
QUERY:
SELECT id, name FROM employees
EXCEPT
SELECT id, name FROM contractors;

_____________________________________________________________________________________________________________________________








